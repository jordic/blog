<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jordi notes</title>
    <link>https://j.tmpo.io/post/</link>
    <description>Recent content in Posts on Jordi notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Feb 2016 07:35:20 +0100</lastBuildDate>
    <atom:link href="https://j.tmpo.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploying Go &#43; Angular Applications</title>
      <link>https://j.tmpo.io/post/deploy_go_angular_apps/</link>
      <pubDate>Sun, 21 Feb 2016 07:35:20 +0100</pubDate>
      
      <guid>https://j.tmpo.io/post/deploy_go_angular_apps/</guid>
      <description>

&lt;h2 id=&#34;tl-dr:00c182bc3cde48762082aef29063ce70&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Distribute a go backend service with an angular frontend. Three ways of deploying a go application.&lt;/p&gt;

&lt;p&gt;A Go application when it&amp;rsquo;s compiled has no dependencies: just a single binary file
that can be executed on every machine you want. Obviously you need to take care of the
architecture, and compile for the correct one.&lt;/p&gt;

&lt;p&gt;Our first approach would be to deploy it as is.. without any external tooling.&lt;/p&gt;

&lt;h2 id=&#34;no-extra-tooling:00c182bc3cde48762082aef29063ce70&#34;&gt;No extra tooling&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You have&lt;/strong&gt;: a single binary file for the backend go application, and a folder, with some
static files that will have to be served from your SPA.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/app/backend
/app/dist/index.html
/app/dist/scripts/app.js
/app/dist/css/app.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Someone will told you that you need a webserver for serving the static files from the SPA.
But there is no need. Go, has a good webserver integrated on the Standard Lib, that is
capable of serving your static files on the same way that Nginx will do. You just need to
declare a flag, or a env config on your backend, pointing to the app path files. And then
from the backend, serve the files, with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.Handle(&amp;quot;/&amp;quot;, http.FileServer(http.Dir(*staticDir)))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is fine, when you deploy, you just need to copy the files to server, and launch
the binary. Sure, you can make a small bash script, that does it indirectly, first, creates
a new folder with the release, and later, ln it  just before relaunch the
service with the new configuration (to make it atomic)&lt;/p&gt;

&lt;h2 id=&#34;append-the-static-files-to-the-go-binary:00c182bc3cde48762082aef29063ce70&#34;&gt;Append the static files to the go binary.&lt;/h2&gt;

&lt;p&gt;OK, past approach seems correct for a lot of use cases. But what happens if you want to offer
your application as a single binary. (For devops tooling for example). You will need that people
download a binary, copy it to some path on their systems, and later copy the static files,
to some other path, and every time they launch the binary, they need to take care on where,
the SAP client application is stored.&lt;/p&gt;

&lt;p&gt;Go has super good solutions to solve this approach and distribute a single binary file, with the
client files appended to it. There are other solutions, but I use this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/elazarl/go-bindata-assetfs&#34;&gt;https://github.com/elazarl/go-bindata-assetfs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every time you build a new release, you need to append static files to the binary, doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go-bin-data data/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will generate a bindata.go file in your project dir, that will allow to serve the
static files from the main binary, just doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.Handle(&amp;quot;/&amp;quot;, http.FileServer(assetsFs()))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the options you can tune, there&amp;rsquo;s a flag for when developing, that allow to serve directly files
from disk, using the same function call. This way, you just develop as usual, and on the end,
when you want to release the application, you just need to &amp;ldquo;generate&amp;rdquo; the bin data file.&lt;/p&gt;

&lt;p&gt;Usually I do this, putting it on a Makefile, and also, when possible compiling a static binary go,
without cgo (no libc dependencies):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;all: compile

compile: assets-production
	CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

assets-production:
    go-bindata-assetsfs --prefix ../../ ../../dist/...

assets-dev:
    go-bindata-assetsfs --debug --prefix ../../ ../../dist/...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is super clean, you end up with a single binary that has the
backend server and also the javascript frontend SAP client. A big win, just
launch it and you have a complete distributively and multiplataform application.&lt;/p&gt;

&lt;h2 id=&#34;distribute-with-a-docker:00c182bc3cde48762082aef29063ce70&#34;&gt;Distribute with a docker&lt;/h2&gt;

&lt;p&gt;Our third approach involves using &lt;a href=&#34;http://docker.com&#34;&gt;http://docker.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is also a easy way of distributing a go app, but this time, you don&amp;rsquo;t need to
append the static files to the binary, is better to copy the static folder to
the docker image. Coming from the binary file compiled before, we can start with
a Dockerfile like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM SCRATCH
COPY app/dist /dist
ADD  backend backend

CMD = [&amp;quot;/backend &amp;quot;-static&amp;quot;, &amp;quot;dist/&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can distribute your application with Docker, this is the more clean approach, you
end app, with an image, that only contains your binary application, plus, your compiled,
Angular SAP Client. On one layer for each one.&lt;/p&gt;

&lt;p&gt;If you change the backend, only the backend layer gets overwritten, also the same for
the client.&lt;/p&gt;

&lt;p&gt;For this we also use makefiles for building the application, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VERSION = r1
PREFIX = yourrepourl

docker_build:
	docker build -t $(PREFIX):$(VERSION) .
	docker tag  $(PREFIX):$(VERSION) $(PREFIX):$(VERSION)

push:
	docker push $(PREFIX):$(VERSION)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Angular tmpo seed</title>
      <link>https://j.tmpo.io/post/angular-seed/</link>
      <pubDate>Fri, 12 Feb 2016 07:55:41 +0100</pubDate>
      
      <guid>https://j.tmpo.io/post/angular-seed/</guid>
      <description>

&lt;h3 id=&#34;angular-tmpo-seed:19572cf71b93b6e2e646daeb1c925e30&#34;&gt;Angular tmpo seed&lt;/h3&gt;

&lt;p&gt;Developing angular applications is hard, if you don&amp;rsquo;t have the correct pipeline
well configured. We started using yeoman, and some generators, but on the end
we prefer this clean approach (just a git repo that you can clone elsewhere)
and start using it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/jordic/angular-tmpo-seed&#34;&gt;http://github.com/jordic/angular-tmpo-seed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lti. New go project</title>
      <link>https://j.tmpo.io/post/lti/</link>
      <pubDate>Wed, 10 Feb 2016 15:35:20 +0100</pubDate>
      
      <guid>https://j.tmpo.io/post/lti/</guid>
      <description>

&lt;h2 id=&#34;new-go-project-lti:29cf78a65e76121ad59e2852298a4579&#34;&gt;New Go project: lti&lt;/h2&gt;

&lt;p&gt;IMS is developing Learning Tools Interoperability (LTI) to allow remote tools
and content to be integrated into a Learning Management System (LMS).&lt;/p&gt;

&lt;p&gt;Just working on game server that needs to connect to an LMS service, and
started developing this go lib.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jordic/lti&#34;&gt;https://github.com/jordic/lti&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caddy with phabricator</title>
      <link>https://j.tmpo.io/post/phabricator_caddy/</link>
      <pubDate>Mon, 08 Feb 2016 05:51:13 +0100</pubDate>
      
      <guid>https://j.tmpo.io/post/phabricator_caddy/</guid>
      <description>&lt;p&gt;Needs caddy 0.8.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://domain {
  root /home/user/phabricator/webroot
    rewrite / /index.php?__path__=/
    rewrite  {
        to {path} {path}/ /index.php?__path__={path_escaped}&amp;amp;{query}
    }

  fastcgi / /var/run/php5-fpm.sock php
  errors /var/log/error.log
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Running a single node kubelet on gcloud</title>
      <link>https://j.tmpo.io/post/kubelet_single_node/</link>
      <pubDate>Sun, 07 Feb 2016 07:55:50 +0100</pubDate>
      
      <guid>https://j.tmpo.io/post/kubelet_single_node/</guid>
      <description>

&lt;h2 id=&#34;rationale:89b45daf0c6780052adc3b010194b78b&#34;&gt;RATIONALE&lt;/h2&gt;

&lt;p&gt;Start a single node kubelet, with a pod definition, as described here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/compute/docs/containers/container_vms&#34;&gt;https://cloud.google.com/compute/docs/containers/container_vms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be useful for projects that need to lanuch single projects
as entites..&lt;/p&gt;

&lt;h3 id=&#34;create-instance:89b45daf0c6780052adc3b010194b78b&#34;&gt;Create Instance&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gcloud compute instances create containervm-test \ 
    --image container-vm --metadata-from-file \
    google-container-manifest=demo.yaml \
    --zone europe-west1-d --machine-type f1-micro \
    --scopes compute-rw,storage-rw,monitoring
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-if-installation-is-working:89b45daf0c6780052adc3b010194b78b&#34;&gt;Test if installation is working&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gcloud compute ssh containervm-test
sudo docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;open-firewall:89b45daf0c6780052adc3b010194b78b&#34;&gt;Open firewall&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gcloud compute firewall-rules create sample-http --allow tcp:80
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cleanup-all:89b45daf0c6780052adc3b010194b78b&#34;&gt;Cleanup all&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gcloud compute instances delete containervm-test
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-can-contain-a-demo-yaml:89b45daf0c6780052adc3b010194b78b&#34;&gt;What can contain a demo.yaml&lt;/h3&gt;

&lt;p&gt;A Pod definition, as in kubernetes.&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-costs-of-a-f1-micro-with-a-ssd-10g-hd:89b45daf0c6780052adc3b010194b78b&#34;&gt;What are the costs of a f1-micro with a SSD 10G HD&lt;/h3&gt;

&lt;p&gt;6.3$/month&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/products/calculator/#id=ed0c925f-b897-484d-9a6e-c02a010649ff&#34;&gt;https://cloud.google.com/products/calculator/#id=ed0c925f-b897-484d-9a6e-c02a010649ff&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proting our nginx sites to Caddy</title>
      <link>https://j.tmpo.io/post/ubuntu_upstart/</link>
      <pubDate>Sat, 06 Feb 2016 08:52:21 +0100</pubDate>
      
      <guid>https://j.tmpo.io/post/ubuntu_upstart/</guid>
      <description>

&lt;h2 id=&#34;from-nginx-to-caddy:190bae218334fa136fc0e260c054d344&#34;&gt;From nginx to caddy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;ttps://caddyserver.com&#34;&gt;Caddy server&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Caddy will serve automatic TLS from letsencrypt&lt;/li&gt;
&lt;li&gt;Caddy will serve http/2&lt;/li&gt;
&lt;li&gt;Caddy is developed in go: this means that is easy to understand it&amp;rsquo;s codebase and also to contribute or add new features.&lt;/li&gt;
&lt;li&gt;Caddy is as much performance as nginx.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are some links and infos I&amp;rsquo;m collecting to start working with caddy in my infraestructure.&lt;/p&gt;

&lt;h3 id=&#34;caddyfile:190bae218334fa136fc0e260c054d344&#34;&gt;Caddyfile&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;http://domain.com, https://domain.com {
    proxy / localhost:8000 {
        proxy_header Host {host}
        except /media /static
    }

   root /var/wwwr/xxx
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;upstart-file-for-caddy:190bae218334fa136fc0e260c054d344&#34;&gt;Upstart file for caddy.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;description &amp;quot;Caddy Server startup script&amp;quot;
author &amp;quot;Mathias Beke&amp;quot;

start on runlevel [2345]
stop on runlevel [016]


setuid some-caddy-user
setgid some-caddy-group

respawn
respawn limit 10 5

limit nofile 4096 4096

script
    cd /home/mathias/
    exec ./caddy
end script
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://denbeke.be/blog/servers/running-caddy-server-as-a-service/&#34;&gt;https://denbeke.be/blog/servers/running-caddy-server-as-a-service/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;supervisor-example-for-gunicorn:190bae218334fa136fc0e260c054d344&#34;&gt;Supervisor example, for gunicorn&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[program:gunicorn]
command=/path/to/gunicorn main:application -c /path/to/gunicorn.conf.py
directory=/path/to/project
user=nobody
autostart=true
autorestart=true
redirect_stderr=true

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Angular Karma run tests images 404</title>
      <link>https://j.tmpo.io/post/angular_karma_404/</link>
      <pubDate>Sat, 06 Feb 2016 08:02:50 +0100</pubDate>
      
      <guid>https://j.tmpo.io/post/angular_karma_404/</guid>
      <description>&lt;p&gt;When running Karma tests I&amp;rsquo;ve got some 404, errors: After digging on
stackoverflow, the solution is based on multiple misconfigured things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add to file list, on karma config, a pattern for images, something like:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
    patterh: path.join(conf.paths.src, &#39;/assets/*/*.png&#39;),
    watched: false,
    included: false,
    served: true    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this, you tell the karma server, to serve found images.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I still have some 404 errors, and seems that are paths not found.
After much digging, I found the solution, proxying them with a
&lt;strong&gt;base&lt;/strong&gt; strange attribute:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;proxies :{
    &#39;/assets/images/&#39;: &#39;/base/src/assets/images/&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, errors have gone.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>